{
"version":3,
"file":"webjar.bundle.min.js",
"lineCount":34,
"mappings":"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",
"sources":["editor.js","patches.js","transformers.js","wysiwygEditor.js"],
"sourcesContent":["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\ndefine('xwiki-realtime-wysiwyg-editor', [], function () {\n  'use strict';\n\n  /**\n   * The component used to interact with the WYSIWYG editor.\n   */\n  class Editor {\n    // We can't use private fields currently because neither JSHit nor Closure Compiler support them.\n    // See https://github.com/jshint/jshint/issues/3361\n    // See https://github.com/google/closure-compiler/issues/2731\n\n    /**\n     * @returns {string} the name of the form field that the editor is editing\n     */\n    getFormFieldName() {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * @returns {string} the HTML content produced by the editor, that can be submitted to the server to be converted to\n     *   wiki syntax\n     */\n    getOutputHTML() {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * @returns {Element} the DOM element containing the editor content (i.e. the element that defines the editable area\n     *   of the editor)\n     */\n    getContentWrapper() {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * @returns {Element} the DOM element that represents the toolbar of the editor\n     */\n    getToolBar() {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * Update the edited content as a result of a remote change.\n     *\n     * @param {Function} updater a function that takes the current content of the editor, modifies it and returns the\n     *   updated nodes\n     * @param {boolean} propagate true when the new content should be propagated to coeditors\n     * @returns {Promise} a promise that resolves when the editor has finished handling the content update (some\n     *   changes, like for instance if you modify some macro parameters, might require a full refresh of the edited\n     *   content).\n     */\n    async updateContent(updater, propagate) {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * Adds a callback to be called whenever the editor content changes as a result of user interaction (local change).\n     *\n     * @param {Function} callback the function to call when the editor content changes\n     */\n    onChange(callback) {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * Note that the editor might not be focused so the returned selection ranges don't always match the current window\n     * selection. The returned ranges correspond to the selection (e.g. the caret position) that the editor remembers\n     * even when it loses focus (e.g. when a dialog is opened).\n     *\n     * @returns {Array[Range]} the currently selected DOM ranges in the editor, {@code []} if there is no selection\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Range\n     */\n    getSelection() {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * Save the current selection so that it can be restored later, usually after a DOM change.\n     */\n    saveSelection() {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * Restore the given DOM selection ranges, or the last saved text selection if no ranges are specified.\n     *\n     * @param {Range[]} ranges the DOM selection ranges to restore; if not specified, the last saved text selection is\n     *   restored\n     */\n    async restoreSelection(ranges) {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * Simulates the loading of the given HTML in the editor without affecting the content that is currently being\n     * edited. The given HTML is parsed into a DOM representation and filtered as if it were to be edited in the editor.\n     * The returned element is similar to calling {@link #getContentWrapper()} after loading the given HTML in the\n     * editor.\n     *\n     * @param {string} html the input HTML to be parsed; this should come either from {@link #getOutputHTML()} or from\n     *   rendering wiki syntax to Annotated HTML\n     * @returns {Element} the DOM representation of the given HTML, with some adjustments to match what you would get\n     *   if you were to load the given HTML directly in the editor; see also {@link #getContentWrapper()}\n     */\n    parseInputHTML(html) {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * Allows the editor to ignore some of the changes found when comparing the remote content with the local content.\n     * Each filter function taks a DOM change as input and returns a boolean indicating whether that change should be\n     * ignored or not.\n     *\n     * @returns {Array[Function]} an array of functions that must be used to filter the DOM changes before applying a\n     *   patch (due to a remote change)\n     */\n    getFilters() {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * Shows a notification message inside the editor.\n     * \n     * @param {string} message the notification message to show\n     * @param {string} type the type of notification (e.g. 'info', 'warning', 'error')\n     */\n    showNotification(message, type) {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * Adds a callback to be called before the editor is destroyed. This is useful for instance to disconnect from the\n     * realtime session. It is especially important for the in-place editor where the user can enter and leave the edit\n     * mode multiple times without reloading the web page, so resources and connections should be properly released when\n     * the editor is destroyed.\n     *\n     * @param {Function} callback the function to call before the editor is destroyed\n     */\n    onBeforeDestroy(callback) {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * Adds a callback to be called before the editor is locked.\n     *\n     * @param {Function} callback the function to call before the editor is locked\n     */\n    onLock(callback) {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * Adds a callback to be called after the editor is unlocked.\n     *\n     * @param {Function} callback the function to call after the editor is unlocked\n     */\n    onUnlock(callback) {\n      throw new Error('Not implemented!');\n    }\n\n    /**\n     * @param {boolean} readOnly {@code true} if the editor should be set to read-only mode, false otherwise\n     */\n    setReadOnly(readOnly) {\n      throw new Error('Not implemented!');\n    }\n  }\n\n  return Editor;\n});\n","/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\ndefine('xwiki-realtime-wysiwyg-patches', [\n  'xwiki-realtime-wysiwyg-transformers',\n  'hyper-json',\n  'diff-dom',\n  'json.sortify',\n  'chainpad',\n], function (\n  /* jshint maxparams:false */\n  Transformers, HyperJSON, DiffDOM, JSONSortify, ChainPad\n) {\n  'use strict';\n\n  class Patches {\n    // We can't use private fields currently because neither JSHit nor Closure Compiler support them.\n    // See https://github.com/jshint/jshint/issues/3361\n    // See https://github.com/google/closure-compiler/issues/2731\n\n    /**\n     * @param {Editor} editor the editor we want to patch\n     */\n    constructor(editor) {\n      this._editor = editor;\n      this._diffDOM = this._createDiffDOM();\n      this._filters = [\n        change => {\n          // Reject any change made directly to the root node (i.e. the editor content wrapper) because it may break the\n          // editor (e.g. it may remove attributes or listeners required by the editor). Only its descendants are\n          // allowed to be modified.\n          if (change.node === this._editor.getContentWrapper() &&\n              // Allow actions where change.node is actually the parent node where the chaange takes place.\n              !['addElement', 'addTextElement', 'relocateGroup'].includes(change.diff.action)) {\n            return true;\n          }\n        },\n        ...this._editor.getFilters()\n      ];\n    }\n\n    _createDiffDOM() {\n      const diffDOM = new DiffDOM.DiffDOM({\n        // We need fine grained diff (at attribute level) even for large content, in order to be able to properly patch\n        // widgets (images, rendering macro calls).\n        maxChildCount: false,\n\n        // Form fields can appear normally only in the output of a rendering macro, which is ignored when computing the\n        // changes (because macro output can depend on the current user).\n        valueDiffing: false,\n\n        preDiffApply: (change) => {\n          if (this._filters.some(filter => filter(change))) {\n            return true;\n          }\n\n          // addAttribute, modifyAttribute, removeAttribute: node is the owner element\n          // modifyTextElement, modifyComment: node is the modified text or comment node\n          // relocateGroup: node is the parent of the moved nodes\n          // replaceElement, removeElement, removeTextElement: node is going to be removed\n          if (['addAttribute', 'modifyAttribute', 'removeAttribute', 'modifyTextElement', 'modifyComment',\n              'relocateGroup', 'replaceElement', 'removeElement', 'removeTextElement'].includes(change.diff.action)) {\n            diffDOM._updatedNodes.add(change.node);\n          }\n        },\n\n        postDiffApply: (change) => {\n          if (!change.newNode && ['addElement', 'replaceElement'].includes(change.diff.action)) {\n            // Unfortunately DiffDOM doesn't set the new node when an element is added or replaced so we have to find it\n            // ourselves.\n            change.newNode = this._getFromRoute(change.diff.route);\n          }\n\n          if (['addTextElement', 'addElement', 'replaceElement'].includes(change.diff.action)) {\n            diffDOM._updatedNodes.add(change.newNode);\n          }\n        }\n      });\n\n      const originalApply = DiffDOM.DiffDOM.prototype.apply;\n      diffDOM.apply = function (...args) {\n        // Reset the list of updated nodes before applying a patch.\n        this._updatedNodes = new Set();\n\n        const result = originalApply.apply(this, args);\n\n        // Remove null and undefined values from the list of updated nodes.\n        this._updatedNodes.delete(null);\n        this._updatedNodes.delete(undefined);\n\n        return result;\n      };\n\n      return diffDOM;\n    }\n\n    /**\n     * Retrieve a node from the edited content, by its route.\n     *\n     * @param {Array[Number]} route a path in the content tree, where each step represents the index of a child of the\n     *   previous node\n     * @returns the node at the given route in the content tree\n     */\n    _getFromRoute(route) {\n      let node = this._editor.getContentWrapper();\n      for (const index of route) {\n        node = node.childNodes[index];\n      }\n      return node;\n    }\n\n    /**\n     * @returns {string} the HyperJSON serialization of the synchronized editor content\n     */\n    getHyperJSON() {\n      const html = this._editor.getOutputHTML();\n      let contentWrapper = this._parseHTML(html);\n      // HyperJSON doesn't support comments, so we have to convert them to custom HTML elements.\n      contentWrapper = this._protectComments(contentWrapper);\n      const hyperJSON = HyperJSON.fromDOM(contentWrapper);\n      return JSONSortify(hyperJSON);\n    }\n\n    /**\n     * Update the editor content without affecting its caret / selection.\n     * \n     * @param {string} remoteHyperJSON the new content (usually the result of a remote change), serialized as HyperJSON\n     * @param {boolean} propagate true when the new content should be propagated to coeditors\n     */\n    async setHyperJSON(remoteHyperJSON, propagate) {\n      const localHyperJSON = this.getHyperJSON();\n      // Avoid processing the remote HyperJSON, computing the DOM diff (which is not necessarily empty if the HyperJSON\n      // is the same because you can always have some BR tag or some DOM attribute added by the browser and which are\n      // not serialized in the HyperJSON), saving the selection, applying the DOM patch and restoring the selection, if\n      // there is no actual change.\n      if (remoteHyperJSON === localHyperJSON) {\n        return;\n      }\n\n      let contentWrapper = this._hyperJSONToDOM(remoteHyperJSON);\n      // HyperJSON doesn't support comments, so we had to convert them to custom HTML elements. Let's restore them.\n      contentWrapper = this._restoreComments(contentWrapper);\n      const inputHTML = contentWrapper.innerHTML;\n      await this.setHTML(inputHTML, propagate);\n    }\n\n    /**\n     * Update the editor content without affecting its caret / selection.\n     * \n     * @param {string} html the new HTML content; we expect this to be the result of rendering the wiki syntax to HTML\n     * @param {boolean} propagate true when the new content should be propagated to coeditors\n     */\n    async setHTML(html, propagate) {\n      const contentWrapper = this._editor.parseInputHTML(html);\n      // Content update is asynchronous because it requires server-side rendering sometimes (e.g. when macro parameters\n      // have changed).\n      await this._updateContent(contentWrapper, propagate);\n    }\n\n    /**\n     * @param {string} html the HTML string to parse (we expected this to be the output of the editor)\n     * @returns {Element} the body element of the HTML document created from the given HTML string\n     */\n    _parseHTML(html) {\n      return new DOMParser().parseFromString(`<body>${html}</body>`, 'text/html').body;\n    }\n\n    /**\n     * HyperJSON doesn't support comments, so we have to convert them to custom HTML elements.\n     *\n     * @param {Node} root the DOM subtree where to look for comment nodes to protect\n     * @returns {Node} the given root node with the comments protected (replaced by a custom HTML element)\n     */\n    _protectComments(root) {\n      const treeWalker = root.ownerDocument.createTreeWalker(root, NodeFilter.SHOW_COMMENT);\n      const comments = [];\n      while (treeWalker.nextNode()) {\n        comments.push(treeWalker.currentNode);\n      }\n      comments.forEach(comment => {\n        const commentElement = root.ownerDocument.createElement('xwiki-comment');\n        commentElement.setAttribute('value', comment.data);\n        comment.replaceWith(commentElement);\n      });\n      return root;\n    }\n\n    /**\n     * HyperJSON doesn't support comments, so we have to convert the custom HTML elements back to comments.\n     *\n     * @param {Node} root the DOM subtree where to look for protected comments to restore\n     * @returns {Node} the given root node with the protected comments restored (replaced by a actual comment node)\n     */\n    _restoreComments(root) {\n      root.querySelectorAll('xwiki-comment').forEach(commentElement => {\n        const comment = root.ownerDocument.createComment(commentElement.getAttribute('value'));\n        commentElement.replaceWith(comment);\n      });\n      return root;\n    }\n\n    /**\n     * @param {string} hyperJSON the HyperJSON string to convert to a DOM node\n     * @returns {Node} the DOM subtree corresponding to the given HyperJSON string\n     */\n    _hyperJSONToDOM(hyperJSON) {\n      const parsedHyperJSON = JSON.parse(hyperJSON);\n      return HyperJSON.toDOM(parsedHyperJSON);\n    }\n\n    /**\n     * Update the editor content without affecting its caret / selection.\n     *\n     * @param {Node} newContent the new content to set, as a DOM node\n     * @param {boolean} propagate true when the new content should be propagated to coeditors\n     */\n    async _updateContent(newContent, propagate) {\n      const selection = this._saveSelection();\n\n      await this._editor.updateContent(oldContent => {\n        // We have to call nodeToObj ourselves because the compared DOM elements are from different documents.\n        const patch = this._diffDOM.diff(DiffDOM.nodeToObj(oldContent), DiffDOM.nodeToObj(newContent));\n        this._diffDOM.apply(oldContent, patch, {\n          // New (added) nodes must be created using the current DOM document, where they will be inserted.\n          document: oldContent.ownerDocument\n        });\n\n        const updatedNodes = this._diffDOM._updatedNodes;\n        this._maybeInvalidateSavedSelection(selection, updatedNodes);\n\n        return updatedNodes;\n      }, propagate);\n\n      await this._restoreSelection(selection);\n    }\n\n    /**\n     * Saves the current selection both as a text selection (to be used in case the selected nodes are replaced or\n     * removed) and as an array of relative ranges (to be used in case the selected nodes are only moved around).\n     *\n     * @returns {Array[Object]} an array of objects (relative ranges) that could be used to restore the selection\n     */\n    _saveSelection() {\n      // Save the selection as a text selection.\n      this._editor.saveSelection();\n      // Save the selection as an array of relative ranges.\n      return this._editor.getSelection().map(range => {\n        // Remember also the selection direction.\n        const savedRange = {reversed: range.reversed};\n        if (!range.startContainer.childNodes.length) {\n          savedRange.startContainer = range.startContainer;\n          savedRange.startOffset = range.startOffset;\n        } else {\n          // We can't simply store a reference to the DOM node before / after the selection boundary because when\n          // applying a remote patch, diffDOM can reuse a DOM node for a different purpose (e.g. replacing its content\n          // and its attributes). So the fact that a node is still attached to the DOM after the remote patch is applied\n          // doesn't mean it has the same meaning as before. At the same time, the fact that a node has been modified by\n          // a remote patch (e.g. by changing the value of an attribute) doesn't necessarily mean it's meaning has\n          // changed. Saving a relative selection is important to avoid restoring the text selection which is slow\n          // because it relies on diffing the text content. But we should restore the relative selection only if the\n          // boundary nodes preserve their meaning afte the remote patch is applied. The ensure this we save the left\n          // and right path from the root of the edited content to the selection boundary nodes, and invalidate the\n          // saved selection if both change after the remote patch is applied.\n          savedRange.startAfter = this._getNodePath(range.startContainer.childNodes[range.startOffset - 1]);\n          savedRange.startBefore = this._getNodePath(range.startContainer.childNodes[range.startOffset]);\n        }\n        if (!range.endContainer.childNodes.length) {\n          savedRange.endContainer = range.endContainer;\n          savedRange.endOffset = range.endOffset;\n        } else {\n          savedRange.endAfter = this._getNodePath(range.endContainer.childNodes[range.endOffset - 1]);\n          savedRange.endBefore = this._getNodePath(range.endContainer.childNodes[range.endOffset]);\n        }\n        return savedRange;\n      });\n    }\n\n    /**\n     * Compute the path of the given DOM node within the edited content.\n     *\n     * @param {Node} node the node for which to compute the path\n     * @returns {Object} the path of the given node in the DOM tree, each path item representing the child index at that\n     *   level\n     */\n    _getNodePath(node) {\n      const path = {\n        // The node the path was computed for.\n        node,\n        // The child index for this node and all its ancestors, counting from the left.\n        left: [],\n        // The child index for this node and all its ancestors, counting from the right.\n        right: []\n      };\n      while (node?.parentNode && node !== this._editor.getContentWrapper()) {\n        const nodeIndex = Array.from(node.parentNode.childNodes).indexOf(node);\n        path.left.push(nodeIndex);\n        path.right.push(node.parentNode.childNodes.length - nodeIndex);\n        node = node.parentNode;\n      }\n      // We return the computed path only if the node is part of the edited content.\n      if (node === this._editor.getContentWrapper()) {\n        // Reverse the path because we built it starting from the node and going up to the content wrapper.\n        path.left.reverse();\n        path.right.reverse();\n        path.left = path.left.join('/');\n        path.right = path.right.join('/');\n        return path;\n      }\n    }\n\n    /**\n     * Invalidates the saved selection if it is affected by the updated nodes.\n     *\n     * @param {Array[Object]} selection an array of objects (relative ranges) that can be used to restore the selection\n     * @param {Set[Node]} updatedNodes the set of updated nodes (as a result of applying remote changes to the content)\n     */\n    _maybeInvalidateSavedSelection(selection, updatedNodes) {\n      selection.forEach(range => {\n        // The saved selection is relative if the original selection had its boundaries between DOM nodes. In that case\n        // we remember the DOM node before and after the selection boundaries. This allows us to restore the selection\n        // properly even when DOM nodes are added or removed, as long as either the node before or after remains in the\n        // DOM. The saved selection in not relative if the original selection had its boundaries inside a text node. In\n        // this case, we have to restore the text selection (diff-based) because we need to take into account how many\n        // characters where added or removed before the selection boundary (offset).\n        if (range.startContainer?.nodeType === Node.TEXT_NODE && updatedNodes.has(range.startContainer)) {\n          delete range.startContainer;\n        }\n        if (range.endContainer?.nodeType === Node.TEXT_NODE && updatedNodes.has(range.endContainer)) {\n          delete range.endContainer;\n        }\n        // Invalidate the selection boundaries for which both the left and the right path have changed.\n        [range.startAfter, range.startBefore, range.endAfter, range.endBefore].forEach(oldPath => {\n          const newPath = this._getNodePath(oldPath?.node);\n          if (newPath?.left !== oldPath?.left && newPath?.right !== oldPath?.right) {\n            delete oldPath.node;\n          }\n        });\n      });\n    }\n\n    /**\n     * Tries to restore the selection first using the relative ranges, if the selected nodes are still in the DOM, and\n     * then using the text selection, if the selected nodes have been replaced or removed.\n     *\n     * @param {Array[Object]} selection an array of objects (relative ranges) that can be used to restore the selection\n     */\n    async _restoreSelection(selection) {\n      const invalidRange = selection.find(savedRange =>\n        [savedRange.startContainer, savedRange.startAfter?.node, savedRange.startBefore?.node]\n          .every(node => !node?.isConnected) ||\n        [savedRange.endContainer, savedRange.endAfter?.node, savedRange.endBefore?.node]\n          .every(node => !node?.isConnected));\n      if (invalidRange) {\n        // Some of the selected nodes were removed from the DOM or the selection was in a text node that was modified.\n        // Restore the text selection.\n        await this._editor.restoreSelection();\n      } else {\n        // The selected nodes are still in the DOM so we can restore the selection using the relative ranges.\n        await this._editor.restoreSelection(selection.map(savedRange => {\n          const range = this._editor.getContentWrapper().ownerDocument.createRange();\n          range.reversed = savedRange.reversed;\n          if (savedRange.startContainer?.isConnected) {\n            range.setStart(savedRange.startContainer, savedRange.startOffset);\n          } else if (savedRange.startBefore?.node?.isConnected) {\n            range.setStartBefore(savedRange.startBefore.node);\n          } else {\n            range.setStartAfter(savedRange.startAfter.node);\n          }\n          if (savedRange.endContainer?.isConnected) {\n            range.setEnd(savedRange.endContainer, savedRange.endOffset);\n          } else if (savedRange.endAfter?.node?.isConnected) {\n            range.setEndAfter(savedRange.endAfter.node);\n          } else {\n            range.setEndBefore(savedRange.endBefore.node);\n          }\n          return range;\n        }));\n      }\n    }\n\n    /**\n     * Transform the local changes (from the current version) so that they can be rebased on top of the remote changes\n     * (from the next version), producing the merged version.\n     *\n     * @param {string} previous the common ancestor between the current version and the next version of the content\n     * @param {string} next the next version of the content, usually the previous version plus the remote changes\n     * @param {string} current the current version of the content, usually the previous version plus the local changes\n     * @returns {string} the merged version of the content, where local changes have been rebased on top of the remote\n     *   changes\n     */\n    static merge(previous, next, current) {\n      // Determine the local and remote changes (operations).\n      const localOperations = ChainPad.Diff.diff(previous, current);\n      const remoteOperations = ChainPad.Diff.diff(previous, next);\n      // Transform the local operations so that we can apply them on top of the remote content (next).\n      const updatedLocalOperations = Transformers.RebaseNaiveJSONTransformer(localOperations, remoteOperations,\n        previous);\n      // Apply the updated operations to the remote content in order to perform the 3-way merge (rebase).\n      const merged = ChainPad.Operation.applyMulti(updatedLocalOperations, next);\n      return merged;\n    }\n  }\n\n  return Patches;\n});\n","/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\ndefine('xwiki-realtime-wysiwyg-transformers', ['chainpad'], function(ChainPad) {\n  'use strict';\n\n  /**\n   * The given text has been modified both remotely, by the specified {@code remoteOperations}, and locally, by the\n   * specified {@code localOperations}. This function transforms (rebases / three-way merge) the local operations\n   * against the remote operations, so that they can be applied to the given text on top of the remote operations.\n   * \n   * Unlike {@link NaiveJSONTransformer}, this transformer ignores local operations that fall inside a remote delete\n   * operation (i.e. local modifications to content that is deleted remotely are ignored).\n   * \n   * @param {Array<Operation>} localOperations your own local operations\n   * @param {Array<Operation>} remoteOperations the incoming remote operations (performed by other users)\n   * @param {string} text the mutual common ancestor (the text before the local and remote operations were performed)\n   * @returns {Array<Operation>} the transformed (rebased) local operations\n   */\n  function RebaseNaiveJSONTransformer(localOperations, remoteOperations, text) {\n    const DEBUG = ChainPad.Common.global.REALTIME_DEBUG = ChainPad.Common.global.REALTIME_DEBUG || {};\n\n    let rebasedLocalOperations, textAfterRemoteOperations, textAfterRebase, error, errorType;\n    try {\n      rebasedLocalOperations = RebaseTextTransformer(localOperations, remoteOperations, text);\n      textAfterRemoteOperations = ChainPad.Operation.applyMulti(remoteOperations, text);\n      textAfterRebase = ChainPad.Operation.applyMulti(rebasedLocalOperations, textAfterRemoteOperations);\n\n      try {\n        JSON.parse(textAfterRebase);\n        return rebasedLocalOperations;\n      } catch (e) {\n        error = e;\n        errorType = 'ot_parseError';\n      }\n    } catch (e) {\n      error = e;\n      errorType = 'ot_applyError';\n    }\n\n    DEBUG[errorType] = {\n      error,\n\n      remoteOperations,\n      localOperations,\n      rebasedLocalOperations,\n\n      text,\n      textAfterRemoteOperations,\n      textAfterRebase\n    };\n    console.error(error);\n    console.debug('Debugging info available at `window.REALTIME_DEBUG.' + errorType + '`');\n\n    // Return an empty patch in case we can't do anything else.\n    return [];\n  }\n\n  /**\n   * The given text has been modified both remotely, by the specified {@code remoteOperations}, and locally, by the\n   * specified {@code localOperations}. This function transforms (rebases / three-way merge) the local operations\n   * against the remote operations, so that they can be applied to the given text on top of the remote operations.\n   * \n   * Unlike {@link TextTransformer}, this transformer ignores local operations that fall inside a remote delete\n   * operation (i.e. local modifications to content that is deleted remotely are ignored).\n   * \n   * @param {Array<Operation>} localOperations your own local operations\n   * @param {Array<Operation>} remoteOperations the incoming remote operations (performed by other users)\n   * @param {string} text the mutual common ancestor (the text before the local and remote operations were performed)\n   * @returns {Array<Operation>} the transformed (rebased) local operations\n   */\n  function RebaseTextTransformer(localOperations, remoteOperations, text) {\n    let textAfterRemoteOperations = ChainPad.Operation.applyMulti(remoteOperations, text);\n\n    let rebasedLocalOperations = [];\n    for (let i = localOperations.length - 1; i >= 0; i--) {\n        let rebasedLocalOperation = localOperations[i];\n        for (let j = remoteOperations.length - 1; j >= 0; j--) {\n            try {\n              rebasedLocalOperation = rebaseOperationSafely(rebasedLocalOperation, remoteOperations[j]);\n            } catch (e) {\n                console.error(\"The pluggable transform function threw an error, \" +\n                  \"failing operational transformation\", e);\n                return [];\n            }\n            if (!rebasedLocalOperation) {\n                break;\n            }\n        }\n        if (rebasedLocalOperation) {\n            if (ChainPad.Common.PARANOIA) {\n              ChainPad.Operation.check(rebasedLocalOperation, textAfterRemoteOperations.length);\n            }\n            rebasedLocalOperations.unshift(rebasedLocalOperation);\n        }\n    }\n\n    return rebasedLocalOperations;\n  }\n\n  /**\n   * Transforms the given {@code localOperation} so that it can be applied on top of the given {@code remoteOperation}.\n   *\n   * @param {Operation} localOperation your own local operation\n   * @param {Operation} remoteOperation the incoming remote operation (performed by another user)\n   * @returns {Operation} the transformed (rebased) local operation, or {@code null} if the local operation should be\n   *   ignored\n   */\n  function rebaseOperationSafely(localOperation, remoteOperation) {\n    if (ChainPad.Common.PARANOIA) {\n      ChainPad.Operation.check(localOperation);\n      ChainPad.Operation.check(remoteOperation);\n    }\n    let rebasedLocalOperation = rebaseOperation(localOperation, remoteOperation);\n    if (!rebasedLocalOperation?.toRemove && !rebasedLocalOperation?.toInsert?.length) {\n      // Discard the rebased local operation because it doesn't do anything.\n      rebasedLocalOperation = null;\n    } else if (ChainPad.Common.PARANOIA) {\n      ChainPad.Operation.check(rebasedLocalOperation);\n    }\n    return rebasedLocalOperation;\n  }\n\n  /**\n   * Transforms the given {@code localOperation} so that it can be applied on top of the given {@code remoteOperation}.\n   *\n   * @param {Operation} localOperation your own local operation\n   * @param {Operation} remoteOperation the incoming remote operation (performed by another user)\n   * @returns {Operation} the transformed (rebased) local operation, or {@code null} if the local operation should be\n   *   ignored\n   */\n  function rebaseOperation(localOperation, remoteOperation) {\n    let rebasedLocalOperation;\n    if (localOperation.offset > remoteOperation.offset) {\n      if (localOperation.offset >= remoteOperation.offset + remoteOperation.toRemove) {\n        // Simple rebase (the local operation inserts or replaces content after the remote operation).\n        rebasedLocalOperation = ChainPad.Operation.create(\n          localOperation.offset - remoteOperation.toRemove + remoteOperation.toInsert.length,\n          localOperation.toRemove,\n          localOperation.toInsert\n        );\n      } else if (localOperation.offset + localOperation.toRemove <= remoteOperation.offset + remoteOperation.toRemove) {\n        // Discard the local operation because it modifies content that has been removed by the remote operation.\n        rebasedLocalOperation = null;\n      } else {\n        // We have to truncate the content that the local operation removes because some part of it was already removed\n        // by the remote operation.\n        rebasedLocalOperation = ChainPad.Operation.create(\n          remoteOperation.offset + remoteOperation.toInsert.length,\n          localOperation.toRemove - (remoteOperation.offset + remoteOperation.toRemove - localOperation.offset),\n          localOperation.toInsert\n        );\n      }\n    } else if (localOperation.offset + localOperation.toRemove <= remoteOperation.offset) {\n      if (localOperation.offset === remoteOperation.offset && !remoteOperation.toRemove) {\n        // Both operations insert content at the same position, without removing anything. We can't know the logical\n        // order of the insertions: the local content can be inserted either before or after the remote content. We\n        // choose to insert the local content after the remote content because the local insertion is rebased on top of\n        // the remote insertion.\n        rebasedLocalOperation = ChainPad.Operation.create(\n          remoteOperation.offset + remoteOperation.toInsert.length,\n          0,\n          localOperation.toInsert\n        );\n      } else {\n        // The local operation is not affected by the remote operation.\n        rebasedLocalOperation = localOperation;\n      }\n    } else if (localOperation.offset + localOperation.toRemove > remoteOperation.offset + remoteOperation.toRemove) {\n      // The local operation removes the content inserted by the remote operation.\n      rebasedLocalOperation = ChainPad.Operation.create(\n        localOperation.offset,\n        localOperation.toRemove - remoteOperation.toRemove + remoteOperation.toInsert.length,\n        localOperation.toInsert\n      );\n    } else if (localOperation.offset === remoteOperation.offset) {\n      // Discard the local operation because it modifies content that has been removed by the remote operation.\n      rebasedLocalOperation = null;\n    } else {\n      // We have to truncate the content that the local operation removes because some part of it was already removed by\n      // the remote operation.\n      rebasedLocalOperation = ChainPad.Operation.create(\n        localOperation.offset,\n        remoteOperation.offset - localOperation.offset,\n        localOperation.toInsert\n      );\n    }\n\n    return rebasedLocalOperation;\n  }\n\n  return {\n    RebaseNaiveJSONTransformer,\n    RebaseTextTransformer\n  };\n});","/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\ndefine('xwiki-realtime-wysiwyg', [\n  'jquery',\n  'xwiki-realtime-config',\n  'xwiki-l10n!xwiki-realtime-messages',\n  'xwiki-realtime-toolbar',\n  'chainpad-netflux',\n  'xwiki-realtime-userData',\n  'xwiki-realtime-typingTests',\n  'xwiki-realtime-interface',\n  'xwiki-realtime-saver',\n  'chainpad',\n  'xwiki-realtime-crypto',\n  'xwiki-realtime-wysiwyg-patches'\n], function (\n  /* jshint maxparams:false */\n  $, realtimeConfig, Messages, Toolbar, ChainPadNetflux, UserData, TypingTest, Interface, Saver, ChainPad, Crypto,\n  Patches\n) {\n  'use strict';\n\n  const EDITOR_TYPE = 'wysiwyg';\n\n  const ConnectionStatus = {\n    // Before trying to connect to the realtime session, and after leaving it.\n    DISCONNECTED: 0,\n    // While trying to connect to the realtime session.\n    CONNECTING: 1,\n    // After successfully connecting to the realtime session, as long as the edited content can be patched.\n    CONNECTED: 2,\n    // While connected to the realtime session, when the edited content can't be patched (e.g. because the content is\n    // being refreshed after a macro was inserted, which requires server-side rendering).\n    PAUSED: 3\n  };\n\n  class RealtimeEditor {\n    constructor(editor, realtimeContext) {\n      this._editor = editor;\n      this._realtimeContext = realtimeContext;\n\n      // The editor wrapper used to smoothly update (patch) the edited content without losing the caret position.\n      this._patchedEditor = new Patches(editor);\n\n      // The channel used to synchronize the edited content (notify others when you make a change and be notified when\n      // others make changes).\n      this._channel = realtimeContext.channels[EDITOR_TYPE];\n\n      // The channel used to synchronize the content (auto)save (notify others when you save and be notified when others\n      // save, in order to avoid merge conflicts and creating unnecessary document revisions).\n      this._eventsChannel = realtimeContext.channels.events;\n\n      // The channel used to synchronize the user caret position (notify others when your caret position changes and be\n      // notified when others' caret position changes).\n      this._userDataChannel = realtimeContext.channels.userdata;\n  \n      Interface.realtimeAllowed(realtimeContext.realtimeEnabled);\n      this._createAllowRealtimeCheckbox();\n\n      this._connection = {\n        status: ConnectionStatus.DISCONNECTED\n      };\n\n      if (realtimeContext.realtimeEnabled) {\n        this._startRealtimeSync();\n      }\n    }\n\n    setEditable(editable) {\n      this._editor.setReadOnly(!editable);\n      $('.buttons [name^=\"action_save\"], .buttons [name^=\"action_preview\"]').prop('disabled', !editable);\n    }\n\n    async lockDocument() {\n      const getDocumentLock = new Promise((resolve, reject) => {\n        if (XWiki.DocumentLock) {\n          resolve(XWiki.DocumentLock);\n        } else {\n          require(['xwiki-document-lock'], resolve, reject);\n        }\n      });\n      XWiki.DocumentLock = await getDocumentLock;\n      XWiki.EditLock = new XWiki.DocumentLock();\n      return XWiki.EditLock.lock();\n    }\n\n    _startRealtimeSync() {\n      this._connection.status = ConnectionStatus.CONNECTING;\n\n      // List of pretty names of all users (mapped with their server ID).\n      this._connection.userData = {};\n\n      // Don't let the user edit until the real-time framework is ready.\n      this.setEditable(false);\n\n      this._connection.realtimeInput = ChainPadNetflux.start(this._getRealtimeOptions());\n\n      // Notify the others that we're editing in realtime.\n      this._realtimeContext.setRealtimeEnabled(true);\n\n      // Listen to local changes and propagate them to the other users.\n      this._editor.onChange(() => {\n        if (this._connection.status === ConnectionStatus.CONNECTED) {\n          this._onLocal();\n          this._saver.contentModifiedLocally();\n        }\n      });\n\n      this._editor.onLock(this._pauseRealtimeSync.bind(this));\n      this._editor.onUnlock(() => {\n        // The editor is usually unlocked after the content is refreshed (e.g. after a macro is inserted). We execute\n        // our handler on the next tick because our handler can trigger a new refresh (e.g. if we received remote\n        // changes that either add a new macro or modify the parameters of an existing macro), and we want to avoid\n        // executing \"nested\" refresh (async) commands because CKEditor doesn't handle them well.\n        setTimeout(this._resumeRealtimeSync.bind(this), 0);\n      });\n\n      // Flush the uncommitted work back to the server on actions that might cause the editor to be destroyed without\n      // the beforeDestroy event being called.\n      const flushUncommittedWork = () => {\n        if (this._connection.status === ConnectionStatus.CONNECTED) {\n          this._connection.chainpad.sync();\n        }\n      };\n      const form = document.getElementById(RealtimeEditor._getFormId());\n      $(form).on('xwiki:actions:cancel xwiki:actions:save xwiki:actions:reload', flushUncommittedWork);\n\n      // Leave the realtime session and stop the autosave when the editor is destroyed. We have to do this because the\n      // editor can be destroyed without the page being reloaded (e.g. when editing in-place).\n      this._editor.onBeforeDestroy(() => {\n        // Flush the uncommitted work back to the server. There is no guarantee that the work is actually committed but\n        // at least we try.\n        flushUncommittedWork();\n        $(form).off('xwiki:actions:cancel xwiki:actions:save xwiki:actions:reload', flushUncommittedWork);\n\n        // Notify the others that we're not editing anymore.\n        this._realtimeContext.destroy();\n        this._onAbort();\n      });\n\n      this._addNetfluxChannelToSubmittedData();\n\n      // Export the typing tests to the window.\n      // Call like `test = easyTest()`\n      // Terminate the test like `test.cancel()`\n      window.easyTest = this._easyTest.bind(this);\n    }\n\n    _addNetfluxChannelToSubmittedData() {\n      // Indicate the Netflux channel used to synchronize the edited content when performing the HTML conversion (e.g.\n      // when refreshing the content after a macro is inserted) in order to render the content using the effective\n      // author associated with this channel (and thus prevent privilege escalation through script injection in the\n      // realtime session).\n      const convertHTMLListener = (event, conversionParams) => {\n        conversionParams.netfluxChannel = this._channel;\n      };\n      $(document).on('xwiki:wysiwyg:convertHTML', convertHTMLListener);\n\n      // Indicate the Netflux channel used to synchronize the edited content when saving the content.\n      const fieldSet = this._editor.getToolBar().closest('form, .form, body')\n        .querySelector('input[name=form_token]').parentNode;\n      let netfluxChannelInput = fieldSet.querySelector(\n        `input[name=netfluxChannel][data-for=\"${CSS.escape(this._editor.getFormFieldName())}\"]`);\n      if (!netfluxChannelInput) {\n        netfluxChannelInput = document.createElement('input');\n        netfluxChannelInput.setAttribute('type', 'hidden');\n        netfluxChannelInput.setAttribute('name', 'netfluxChannel');\n        netfluxChannelInput.setAttribute('data-for', this._editor.getFormFieldName());\n        fieldSet.prepend(netfluxChannelInput);\n      }\n      netfluxChannelInput.value = this._channel;\n\n      // Cleanup when we leave the realtime session.\n      this._removeNetfluxChannelFromSubmittedData = () => {\n        $(document).off('xwiki:wysiwyg:convertHTML', convertHTMLListener);\n        netfluxChannelInput.value = '';\n      };\n    }\n\n    /**\n     * Update the channels keys for reconnecting WebSocket.\n     */\n    async _updateChannels() {\n      const channels = await this._realtimeContext.updateChannels();\n      this._channel = channels[EDITOR_TYPE] || this._channel;\n      this._eventsChannel = channels.events || this._eventsChannel;\n      this._userDataChannel = channels.userdata || this._userDataChannel;\n      return channels;\n    }\n\n    _createAllowRealtimeCheckbox() {\n      const realtimeEnabled = this._realtimeContext.realtimeEnabled;\n      // Don't display the checkbox in the following cases:\n      // * realtimeEnabled 0 (instead of true/false) => we can't connect to the websocket service\n      // * realtime is disabled and we're not an advanced user\n      if (realtimeEnabled !== 0 && (realtimeEnabled || this._realtimeContext.user.advanced)) {\n        const allowRealtimeCheckbox = Interface.createAllowRealtimeCheckbox(Interface.realtimeAllowed());\n        const realtimeToggleHandler = () => {\n          if (allowRealtimeCheckbox.prop('checked')) {\n            // Disable the checkbox while we're fetching the channels.\n            allowRealtimeCheckbox.prop('disabled', true);\n            // We need to fetch the channels before we can connect to the realtime session because:\n            // * the channels might have been closed since we left the realtime session\n            // * the channels might have changed since we last connected to the realtime session\n            // * the channels might not have been created yet because we started editing with realtime disabled.\n            this._updateChannels().then(() => {\n              Interface.realtimeAllowed(true);\n              this._startRealtimeSync();\n            }).catch(() => {\n              // We failed to fetch the channels so we can't connect to the realtime session.\n              allowRealtimeCheckbox.prop('checked', false);\n            }).finally(() => {\n              // Re-enable the checkbox so that the user can try again.\n              allowRealtimeCheckbox.prop('disabled', false);\n            });\n          } else {\n            this._realtimeContext.displayDisableModal((state) => {\n              if (!state) {\n                allowRealtimeCheckbox.prop('checked', true);\n              } else {\n                Interface.realtimeAllowed(false);\n                this._onAbort();\n              }\n            });\n          }\n        };\n        allowRealtimeCheckbox.on('change', realtimeToggleHandler);\n        this._editor.onBeforeDestroy(() => {\n          allowRealtimeCheckbox.off('change', realtimeToggleHandler);\n        });\n      }\n    }\n\n    async _createSaver(info, userName) {\n      const saverConfig = {\n        editorType: EDITOR_TYPE,\n        editorName: 'WYSIWYG',\n        // Id of the wiki page form.\n        formId: RealtimeEditor._getFormId(),\n        userList: info.userList,\n        userName,\n        network: info.network,\n        channel: this._eventsChannel,\n        showNotification: Interface.createMergeMessageElement(\n          this._connection.toolbar.toolbar.find('.rt-toolbar-rightside')),\n        setTextValue: (newText) => {\n          this._patchedEditor.setHTML(newText, true);\n        },\n        getTextValue: () => {\n          try {\n            return this._editor.getOutputHTML();\n          } catch (e) {\n            this._editor.showNotification(Messages['editor.getContentFailed'], 'warning');\n            return null;\n          }\n        },\n        getTextAtCurrentRevision: () => {\n          return $.get(XWiki.currentDocument.getURL('get', $.param({\n            xpage:'get',\n            outputSyntax:'annotatedhtml',\n            outputSyntaxVersion:'5.0',\n            transformations:'macro'\n          })));\n        }\n      };\n      this._saver = await new Saver(saverConfig).toBeReady();\n    }\n\n    static _getFormId() {\n      if (window.XWiki.editor === 'wysiwyg') {\n        if (window.XWiki.contextaction === 'view') {\n          return 'inplace-editing';\n        } else {\n          return 'edit';\n        }\n      } else {\n        return 'inline';\n      }\n    }\n\n    _changeUserIcons(newdata) {\n      if (!realtimeConfig.marginAvatar) {\n        return;\n      }\n\n      // If no new data (someone has just joined or left the channel), get the latest known values.\n      const updatedData = newdata || this._connection.userData;\n\n      const contentWrapper = this._editor.getContentWrapper();\n      const contentWrapperTop = $(contentWrapper).offset().top;\n      const ownerDocument = contentWrapper.ownerDocument;\n      $(ownerDocument).find('.rt-user-position').remove();\n      const positions = {};\n      this._connection.userList.users.filter(id => updatedData[id]?.['cursor_' + EDITOR_TYPE]).forEach(id => {\n        const data = updatedData[id];\n        const name = RealtimeEditor._getPrettyName(data.name);\n        // Set the user position.\n        const element = ownerDocument.evaluate(data['cursor_' + EDITOR_TYPE], contentWrapper, null,\n          XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n        if (!element) {\n          return;\n        }\n        const top = $(element).offset().top - contentWrapperTop;\n        if (!positions[top]) {\n          positions[top] = [id];\n        } else {\n          positions[top].push(id);\n        }\n        let $indicator;\n        if (data.avatar) {\n          $indicator = $('<img alt=\"\"/>').attr('src', data.avatar);\n        } else {\n          $indicator = $('<div></div>').text(name.substring(0, 1));\n        }\n        $indicator.addClass('rt-non-realtime rt-user-position').attr({\n          id: 'rt-user-' + id,\n          title: name,\n          contenteditable: 'false'\n        }).css({\n          // Use the default top value (which is normally the top padding of the rich text area) if the element holding\n          // the caret has 0 or negative top value (this can happen for instance if the caret is directly under the root\n          // element, e.g. the BODY element for the standalone edit mode).\n          'top': top > 0 ? top + 'px' : ''\n        });\n        $(contentWrapper).after($indicator);\n      });\n    }\n\n    _getRealtimeOptions() {\n      return {\n        initialState: this._patchedEditor.getHyperJSON() || '{}',\n        websocketURL: this._realtimeContext.webSocketURL,\n        userName: this._realtimeContext.user.name,\n        channel: this._channel,\n        crypto: Crypto,\n        network: this._realtimeContext.network,\n\n        // Operational Transformation\n        // The synchronization is done on JSON so we need to make sure the output of the synchronization is always\n        // valid JSON.\n        patchTransformer: ChainPad.NaiveJSONTransformer,\n\n        validateContent: (content) => {\n          try {\n            JSON.parse(content || '{}');\n            return true;\n          } catch (e) {\n            console.error(\"Failed to parse JSON content, rejecting patch.\", {\n              content,\n              error: e\n            });\n            return false;\n          }\n        },\n\n        onInit: this._onInit.bind(this),\n        onReady: this._onReady.bind(this),\n\n        // This function resets the realtime fields after coming back from source mode.\n        onLocalFromSource: () => {\n          this._onLocal();\n        },\n\n        onLocal: this._onLocal.bind(this),\n        onRemote: this._onRemote.bind(this),\n        onConnectionChange: this._onConnectionChange.bind(this),\n        beforeReconnecting: this._beforeReconnecting.bind(this)\n      };\n    }\n\n    _onInit(info) {\n      // List of users still connected to the channel (server IDs).\n      this._connection.userList = info.userList;\n      const config = {\n        userData: this._connection.userData,\n        onUsernameClick: (id) => {\n          const editableContentLocation = this._editor.getContentWrapper().ownerDocument.defaultView.location;\n          const baseHref = editableContentLocation.href.split('#')[0] || '';\n          editableContentLocation.href = baseHref + '#rt-user-' + id;\n        }\n      };\n      // The real-time toolbar, showing the list of connected users, the merge message, the spinner and the lag.\n      this._connection.toolbar = Toolbar.create({\n        '$container': $(this._editor.getToolBar()),\n        myUserName: info.myID,\n        realtime: info.realtime,\n        getLag: info.getLag,\n        userList: info.userList,\n        config\n      });\n      // When someone leaves, if they used Save&View, it removes the locks from the document. We're going to add it\n      // again to be sure new users will see the lock page and be able to join.\n      let oldUsers = JSON.parse(JSON.stringify(info.userList.users || []));\n      info.userList.change.push(() => {\n        if (info.userList.length) {\n          // If someone has left, try to get the lock.\n          if (oldUsers.some(user => info.userList.users.indexOf(user) === -1)) {\n            this.lockDocument();\n          }\n          oldUsers = JSON.parse(JSON.stringify(info.userList.users || []));\n        }\n      });\n    }\n\n    async _onReady(info) {\n      if (this._connection.status !== ConnectionStatus.CONNECTING) {\n        return;\n      }\n\n      this._connection.chainpad = info.realtime;\n\n      if (!this._connection.isOnReadyPreviouslyCalled) {\n        this._connection.isOnReadyPreviouslyCalled = true;\n        // Update the user list to link the wiki name to the user id.\n        const userDataConfig = {\n          myId: info.myId,\n          userName: this._realtimeContext.user.name,\n          userAvatar: this._realtimeContext.user.avatarURL,\n          onChange: this._connection.userList.onChange,\n          crypto: Crypto,\n          editor: EDITOR_TYPE,\n          getCursor: () => {\n            // We take into account only the first selection range when showing the user cursor.\n            let node = this._editor.getSelection()[0]?.startContainer;\n            if (!node) {\n              return '';\n            }\n            node = (node.nodeName === '#text') ? node.parentNode : node;\n            return this._getXPath(node);\n          }\n        };\n        if (!realtimeConfig.marginAvatar) {\n          delete userDataConfig.getCursor;\n        }\n\n        this._connection.userData = await UserData.start(info.network, this._userDataChannel, userDataConfig);\n        this._connection.userList.change.push(this._changeUserIcons.bind(this));\n      }\n\n      await this._createSaver(info, this._realtimeContext.user.name);\n\n      this._connection.status = ConnectionStatus.CONNECTED;\n\n      // Initialize the edited content with the content from the realtime session.\n      await this._onRemote(info);\n\n      console.debug('Unlocking editor');\n      this.setEditable(true);\n    }\n\n    _onLocal(localContent) {\n      if (this._connection.status !== ConnectionStatus.CONNECTED) {\n        return;\n      }\n      if (typeof localContent !== 'string') {\n        // Stringify the JSON and send it into ChainPad.\n        localContent = this._patchedEditor.getHyperJSON();\n      }\n      console.debug('Push local content: ' + localContent);\n      this._connection.chainpad.contentUpdate(localContent);\n\n      const remoteContent = this._connection.chainpad.getUserDoc();\n      if (remoteContent !== localContent) {\n        console.warn('Unexpected remote content after synchronization: ', {\n          expected: localContent,\n          actual: remoteContent,\n          diff: ChainPad.Diff.diff(localContent, remoteContent)\n        });\n      }\n    }\n\n    async _onRemote(info) {\n      if (this._connection.status !== ConnectionStatus.CONNECTED) {\n        return;\n      }\n\n      // We have to pause the realtime sync while we apply remote changes because reloading the content (e.g. when a\n      // rendering macro is inserted or updated) and restoring the selection are asynchronous operations (macros have to\n      // be rendered server-side and selection restore uses a Web Worker to perform the diff).\n      this._pauseRealtimeSync();\n\n      try {\n        let remoteContent = info.realtime.getUserDoc();\n        console.debug(\"Received remote content: \" + remoteContent);\n\n        // Build a DOM from HyperJSON, diff and patch the editor, then wait for the widgets to be ready (in case they\n        // had to be reloaded, e.g. rendering macros have to be rendered server-side).\n        await this._patchedEditor.setHyperJSON(remoteContent);\n\n        const localContent = this._patchedEditor.getHyperJSON();\n        if (localContent !== remoteContent) {\n          console.warn(\"Unexpected local content after synchronization: \", {\n            expected: remoteContent,\n            actual: localContent,\n            diff: ChainPad.Diff.diff(remoteContent, localContent),\n          });\n        }\n      } finally {\n        await this._resumeRealtimeSync();\n      }\n    }\n\n    _onConnectionChange(info) {\n      if (this._connection.status === ConnectionStatus.DISCONNECTED) {\n        return;\n      }\n      console.debug('Connection status: ' + info.state);\n      this._connection.toolbar.failed();\n      if (info.state) {\n        this._connection.status = ConnectionStatus.CONNECTING;\n        this._connection.toolbar.reconnecting(info.myId);\n      } else {\n        this._connection.chainpad.abort();\n        this.setEditable(false);\n      }\n    }\n\n    _beforeReconnecting(callback) {\n      const oldChannel = this._channel;\n      this._updateChannels().then(() => {\n        if (this._channel === oldChannel) {\n          // The Netflux channel used before the WebSocket connection closed is still available so we can still use it.\n          callback(this._channel, this._patchedEditor.getHyperJSON());\n        } else {\n          // The Netflux channel used before the WebSocket connection closed is not available anymore so we have to\n          // abort the current realtime session.\n          this._onAbort();\n          if (!this._saver.isDirty()) {\n            // Fortunately we don't have any unsaved local changes so we can rejoin the realtime session using the new\n            // Netflux channel.\n            //\n            // The editor was previously put in read-only mode when we got disconnected from the WebSocket (i.e. when\n            // the WebSocket connection status changed, see above). The editor takes into account nested calls to\n            // setReadOnly so we need to make sure the previous setEditable(false) has a corresponding call to\n            // setEditable(true). The user won't be able to edit right away because the editor is put back in read-only\n            // mode while we reconnect to the realtime session (in _startRealtimeSync).\n            this.setEditable(true);\n            this._startRealtimeSync();\n          } else {\n            // We can't rejoin the realtime session using the new Netflux channel because we would lose the unsaved\n            // local changes. Let the user decide what to do.\n            Interface.getAllowRealtimeCheckbox().prop('checked', false);\n            this._realtimeContext.displayReloadModal();\n          }\n        }\n      });\n    }\n\n    _onAbort() {\n      if (this._connection.status === ConnectionStatus.DISCONNECTED) {\n        // We already left the realtime session.\n        return;\n      }\n\n      console.debug(\"Aborting the realtime session!\");\n      this._connection.status = ConnectionStatus.DISCONNECTED;\n\n      // Stop the realtime content synchronization (leave the WYSIWYG editor Netflux channel associated with the edited\n      // document field).\n      this._connection.realtimeInput.stop();\n\n      // Notify the others that we're editing offline (outside of the realtime session).\n      this._realtimeContext.setRealtimeEnabled(false);\n\n      // Stop the autosave (and leave the events Netflux channel associated with the edited document).\n      this._saver?.stop();\n\n      // Remove the realtime toolbar.\n      this._connection.toolbar?.failed();\n      this._connection.toolbar?.toolbar.remove();\n\n      // Stop receiving user caret updates (leave the user data Netflux channel associated with the edited document).\n      this._connection.userData.stop?.();\n      // And remove the user caret indicators.\n      this._changeUserIcons({});\n\n      // Don't include the channel in the submitted data if we're not connected to the realtime session.\n      this._removeNetfluxChannelFromSubmittedData();\n\n      // Typing tests require the realtime session to be active.\n      delete window.easyTest;\n\n      // Cleanup connection data.\n      this._connection = {\n        status: ConnectionStatus.DISCONNECTED\n      };\n    }\n\n    _pauseRealtimeSync() {\n      if (this._connection.status === ConnectionStatus.CONNECTED) {\n        this._connection.status = ConnectionStatus.PAUSED;\n        this._connection.pauseDepth = 1;\n        this._connection.remoteContentBeforePause = this._connection.chainpad.getUserDoc();\n      } else if (this._connection.status === ConnectionStatus.PAUSED) {\n        this._connection.pauseDepth++;\n      }\n    }\n\n    async _resumeRealtimeSync() {\n      if (this._connection.status === ConnectionStatus.PAUSED && --this._connection.pauseDepth === 0) {\n        this._connection.status = ConnectionStatus.CONNECTED;\n        const remoteContentAfterPause = this._connection.chainpad.getUserDoc();\n        const localContentAfterPause = this._patchedEditor.getHyperJSON();\n        if (remoteContentAfterPause === this._connection.remoteContentBeforePause) {\n          // We didn't receive any remote changes while the realtime sync was paused.\n          if (localContentAfterPause !== this._connection.remoteContentBeforePause) {\n            // The local content has changed while the realtime sync was paused (e.g. because one of the inserted macros\n            // is editable in-place and its rendering added nested editable areas).\n            this._onLocal();\n          }\n        } else if (localContentAfterPause === this._connection.remoteContentBeforePause) {\n          // The local content didn't change while the realtime sync was paused, but we received remote changes. Let's\n          // apply them.\n          await this._onRemote({\n            realtime: this._connection.chainpad\n          });\n        } else {\n          // The local content and the remote content have diverged. We need a 3-way merge.\n          this._onLocal(Patches.merge(this._connection.remoteContentBeforePause, remoteContentAfterPause,\n            localContentAfterPause));\n          await this._onRemote({\n            realtime: this._connection.chainpad\n          });\n        }\n      }\n    }\n\n    _easyTest() {\n      return TypingTest.testInput(\n        () => this._editor.getContentWrapper()?.ownerDocument.defaultView.getSelection(),\n        this._onLocal.bind(this)\n      );\n    }\n\n    _getXPath(element) {\n      let xpath = [];\n      const root = this._editor.getContentWrapper();\n      while (element && element.nodeType === Node.ELEMENT_NODE && element !== root) {\n        let index = $(element.parentNode).children(element.tagName).index(element) + 1;\n        // Specify the index only if it's not the first element of its kind.\n        index = index > 1 ? '[' + index + ']' : '';\n        xpath.push(element.tagName.toLowerCase() + index);\n        element = element.parentNode;\n      }\n      // The returned XPath must be relative to the content wrapper because the HTML structure beyond that is different\n      // for different edit modes (e.g. the standalone edit mode uses an iframe where the content wrapper is the BODY\n      // element while the in-place edit mode uses a DIV element).\n      if (element === root) {\n        xpath.push('.');\n      }\n      // The path needs to start from the top-most element.\n      xpath = xpath.reverse();\n      return xpath.join('/');\n    }\n  \n    static _getPrettyName(userName) {\n      return userName ? userName.replace(/^.*-([^-]*)%2d\\d*$/, function(all, one) { \n        return decodeURIComponent(one);\n      }) : userName;\n    }\n  }\n\n  window.REALTIME_DEBUG = window.REALTIME_DEBUG || {};\n  window.REALTIME_DEBUG.logs = [];\n  ['debug', 'error', 'info', 'log', 'trace', 'warn'].forEach(level => {\n    const original = console[level];\n    console[level] = function (...args) {\n      original(...args);\n      window.REALTIME_DEBUG.logs.push([level, ...args]);\n    };\n  });\n\n  return RealtimeEditor;\n});\n"],
"names":["define","Editor","getFormFieldName","Error","getOutputHTML","getContentWrapper","getToolBar","updateContent","updater","propagate","onChange","callback","getSelection","saveSelection","restoreSelection","ranges","parseInputHTML","html","getFilters","showNotification","message","type","onBeforeDestroy","onLock","onUnlock","setReadOnly","readOnly","Transformers","HyperJSON","DiffDOM","JSONSortify","ChainPad","Patches","constructor","editor","_editor","_diffDOM","_createDiffDOM","_filters","change","node","includes","diff","action","diffDOM","maxChildCount","valueDiffing","preDiffApply","some","filter","_updatedNodes","add","postDiffApply","newNode","_getFromRoute","route","originalApply","prototype","apply","diffDOM.apply","args","Set","result","delete","undefined","index","childNodes","getHyperJSON","contentWrapper","_parseHTML","_protectComments","hyperJSON","fromDOM","setHyperJSON","remoteHyperJSON","localHyperJSON","_hyperJSONToDOM","_restoreComments","setHTML","innerHTML","_updateContent","parseFromString","DOMParser","body","root","treeWalker","ownerDocument","createTreeWalker","NodeFilter","SHOW_COMMENT","comments","nextNode","push","currentNode","forEach","comment","commentElement","createElement","setAttribute","data","replaceWith","querySelectorAll","createComment","getAttribute","parsedHyperJSON","JSON","parse","toDOM","newContent","selection","_saveSelection","oldContent","patch","nodeToObj","document","updatedNodes","_maybeInvalidateSavedSelection","_restoreSelection","map","range","savedRange","reversed","startContainer","length","startAfter","_getNodePath","startOffset","startBefore","endContainer","endAfter","endOffset","endBefore","path","left","right","parentNode","nodeIndex","Array","from","indexOf","reverse","join","nodeType","Node","TEXT_NODE","has","oldPath","newPath","find","invalidRange","every","isConnected","createRange","setStart","setStartBefore","setStartAfter","setEnd","setEndAfter","setEndBefore","merge","previous","next","current","localOperations","Diff","remoteOperations","updatedLocalOperations","RebaseNaiveJSONTransformer","Operation","applyMulti","merged","RebaseTextTransformer","text","textAfterRemoteOperations","rebasedLocalOperations","i","rebasedLocalOperation","j","Common","PARANOIA","check","localOperation","remoteOperation","offset","toRemove","create","toInsert","e","console","error","unshift","DEBUG","global","REALTIME_DEBUG","textAfterRebase","errorType","debug","$","realtimeConfig","Messages","Toolbar","ChainPadNetflux","UserData","TypingTest","Interface","Saver","Crypto","RealtimeEditor","realtimeContext","_realtimeContext","_patchedEditor","_channel","channels","_eventsChannel","events","_userDataChannel","userdata","realtimeAllowed","realtimeEnabled","_createAllowRealtimeCheckbox","_connection","status","DISCONNECTED","_startRealtimeSync","setEditable","editable","prop","lockDocument","getDocumentLock","Promise","resolve","reject","XWiki","DocumentLock","require","EditLock","lock","CONNECTING","userData","realtimeInput","start","_getRealtimeOptions","setRealtimeEnabled","CONNECTED","_onLocal","_saver","contentModifiedLocally","_pauseRealtimeSync","bind","setTimeout","_resumeRealtimeSync","flushUncommittedWork","chainpad","sync","form","getElementById","_getFormId","on","off","destroy","_onAbort","_addNetfluxChannelToSubmittedData","window","easyTest","_easyTest","convertHTMLListener","event","conversionParams","netfluxChannel","fieldSet","closest","querySelector","netfluxChannelInput","CSS","escape","prepend","value","_removeNetfluxChannelFromSubmittedData","this._removeNetfluxChannelFromSubmittedData","_updateChannels","updateChannels","user","advanced","allowRealtimeCheckbox","createAllowRealtimeCheckbox","realtimeToggleHandler","then","catch","finally","displayDisableModal","state","_createSaver","info","userName","saverConfig","editorType","EDITOR_TYPE","editorName","formId","userList","network","channel","createMergeMessageElement","toolbar","setTextValue","newText","getTextValue","getTextAtCurrentRevision","get","currentDocument","getURL","param","xpage","outputSyntax","outputSyntaxVersion","transformations","toBeReady","contextaction","_changeUserIcons","newdata","marginAvatar","updatedData","contentWrapperTop","top","remove","positions","users","id","name","_getPrettyName","element","evaluate","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","$indicator","avatar","attr","substring","addClass","title","contenteditable","css","after","initialState","websocketURL","webSocketURL","crypto","patchTransformer","NaiveJSONTransformer","validateContent","content","onInit","_onInit","onReady","_onReady","onLocalFromSource","onLocal","onRemote","_onRemote","onConnectionChange","_onConnectionChange","beforeReconnecting","_beforeReconnecting","config","onUsernameClick","editableContentLocation","defaultView","location","baseHref","href","split","myUserName","myID","realtime","getLag","oldUsers","stringify","isOnReadyPreviouslyCalled","userDataConfig","myId","userAvatar","avatarURL","getCursor","nodeName","_getXPath","localContent","contentUpdate","remoteContent","getUserDoc","warn","expected","actual","failed","reconnecting","abort","oldChannel","isDirty","getAllowRealtimeCheckbox","displayReloadModal","stop","PAUSED","pauseDepth","remoteContentBeforePause","remoteContentAfterPause","localContentAfterPause","testInput","xpath","ELEMENT_NODE","children","tagName","toLowerCase","replace","all","one","decodeURIComponent","logs","level","original"]
}
